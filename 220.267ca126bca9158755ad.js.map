{"version":3,"file":"220.267ca126bca9158755ad.js","mappings":"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","sources":["webpack://mytonwallet/./src/api/blockchains/ton/util/CustomHttpProvider.ts","webpack://mytonwallet/./src/api/storages/extension.ts","webpack://mytonwallet/./src/api/storages/idb.ts","webpack://mytonwallet/./src/api/storages/localStorage.ts","webpack://mytonwallet/./src/api/storages/types.ts","webpack://mytonwallet/./src/api/types/errors.ts","webpack://mytonwallet/./src/lib/aes-js/index.js","webpack://mytonwallet/./src/lib/axios-fetch-adapter/index.js","webpack://mytonwallet/./src/lib/noble-ed25519/index.js","webpack://mytonwallet/./src/lib/webextension-polyfill/index.ts","webpack://mytonwallet/./src/util/callbacks.ts","webpack://mytonwallet/./src/util/compareTransactions.ts","webpack://mytonwallet/./src/util/generateUniqueId.ts","webpack://mytonwallet/./src/util/ledger/utils.ts","webpack://mytonwallet/./src/util/memoized.ts","webpack://mytonwallet/./src/util/stringFormat.ts","webpack://mytonwallet/./src/util/withCacheAsync.ts"],"sourcesContent":["import TonWeb from 'tonweb';\n\nimport { logDebugError } from '../../../../util/logs';\nimport { pause } from '../../../../util/schedulers';\n\nconst ATTEMPTS = 5;\nconst ERROR_PAUSE = 200; // 200 ms\n\nclass CustomHttpProvider extends TonWeb.HttpProvider {\n  send(method: string, params: any): Promise<Response> {\n    return this.sendRequest(this.host, {\n      id: 1, jsonrpc: '2.0', method, params,\n    });\n  }\n\n  async sendRequest(apiUrl: string, request: any) {\n    const method: string = request.method;\n    let lastError: any;\n    let lastStatusCode: number | undefined;\n\n    const headers: AnyLiteral = {\n      'Content-Type': 'application/json',\n    };\n    if (this.options.apiKey) {\n      headers['X-API-Key'] = this.options.apiKey;\n    }\n    const body = JSON.stringify(request);\n\n    for (let i = 1; i <= ATTEMPTS; i++) {\n      try {\n        const response = await fetch(apiUrl, {\n          method: 'POST', headers, body,\n        });\n        lastStatusCode = response.status;\n        const { error, result } = await response.json();\n        if (error) {\n          throw new Error(error);\n        }\n        return result;\n      } catch (err: any) {\n        lastError = err;\n\n        const message: string = typeof err === 'string' ? err : err.message;\n        if (isNotTemporaryError(method, message, lastStatusCode)) {\n          throw err;\n        }\n\n        if (i < ATTEMPTS) {\n          if (!isFrequentError(message)) {\n            logDebugError('HttpProvider:sendRequest', 'retry', err);\n          }\n          await pause(ERROR_PAUSE * i);\n        }\n      }\n    }\n\n    throw lastError;\n  }\n}\n\nfunction isNotTemporaryError(method: string, message: string, statusCode?: number) {\n  return statusCode === 422 || (method === 'sendBoc' && message?.includes('exitcode='));\n}\n\nfunction isFrequentError(message: string) {\n  return message.includes('LITE_SERVER_NOTREADY') || message.includes('LITE_SERVER_UNKNOWN');\n}\n\nexport default CustomHttpProvider;\n","import extension from '../../lib/webextension-polyfill';\n\nimport type { Storage } from './types';\n\nimport { IS_EXTENSION } from '../environment';\n\n// eslint-disable-next-line no-restricted-globals\nconst storage = IS_EXTENSION ? extension.storage.local : undefined;\n\nexport default ((storage && {\n  getItem: async (key) => (await storage.get(key))?.[key],\n  setItem: (key, value) => storage.set({ [key]: value }),\n  removeItem: storage.remove.bind(storage),\n  clear: storage.clear.bind(storage),\n  getAll: storage.get.bind(storage),\n  setMany: storage.set.bind(storage),\n  getMany: storage.get.bind(storage),\n}) || {}) as Storage;\n","import * as idb from 'idb-keyval';\n\nimport type { Storage } from './types';\n\nimport { fromKeyValueArrays } from '../../util/iteratees';\n\nexport default {\n  getItem: idb.get,\n  setItem: idb.set,\n  removeItem: idb.del,\n  clear: idb.clear,\n  getAll: async () => {\n    const keys = await idb.keys() as string[];\n    const values = await idb.getMany(keys);\n    return fromKeyValueArrays(keys, values);\n  },\n  getMany: async (keys) => {\n    const values = await idb.getMany(keys);\n    return fromKeyValueArrays(keys, values);\n  },\n  setMany: (items) => {\n    return idb.setMany(Object.entries(items));\n  },\n} as Storage;\n","import type { Storage } from './types';\n\nimport { pick } from '../../util/iteratees';\n\nfunction withPromise(fn: AnyFunction) {\n  return (...args: any) => Promise.resolve(fn(...args));\n}\n\nexport default (typeof localStorage === 'object' ? {\n  getItem: withPromise(localStorage.getItem),\n  setItem: localStorage.setItem,\n  removeItem: localStorage.removeItem,\n  clear: localStorage.clear,\n  getAll: withPromise(() => ({ ...localStorage })),\n  getMany: withPromise((keys: string[]) => pick(localStorage, keys)),\n  setMany: (items: AnyLiteral) => {\n    Object.assign(localStorage, items);\n  },\n} : {}) as Storage;\n","export enum StorageType {\n  IndexedDb,\n  LocalStorage,\n  ExtensionLocal,\n}\n\nexport interface Storage {\n  getItem(name: StorageKey): Promise<any>;\n\n  setItem(name: StorageKey, value: any): Promise<void>;\n\n  removeItem(name: StorageKey): Promise<void>;\n\n  clear(): Promise<void>;\n\n  getAll(): Promise<AnyLiteral>;\n\n  setMany(items: AnyLiteral): Promise<void>;\n\n  getMany(keys: string[]): Promise<AnyLiteral>;\n}\n\nexport type StorageKey = 'addresses'\n| 'mnemonicsEncrypted'\n| 'publicKeys'\n| 'accounts'\n| 'stateVersion'\n| 'currentAccountId'\n// For extension\n| 'dapps'\n| 'dappMethods:lastAccountId'\n| 'windowId'\n| 'windowState'\n| 'isTonMagicEnabled'\n| 'isTonProxyEnabled'\n| 'isDeeplinkHookEnabled'\n// For TonConnect SSE\n| 'sseLastEventId';\n","export enum ApiTransactionDraftError {\n  InvalidAmount = 'InvalidAmount',\n  InvalidToAddress = 'InvalidToAddress',\n  InsufficientBalance = 'InsufficientBalance',\n  Unexpected = 'Unexpected',\n  DomainNotResolved = 'DomainNotResolved',\n  WalletNotInitialized = 'WalletNotInitialized',\n  UnsupportedHardwarePayload = 'UnsupportedHardwarePayload',\n}\n\nexport enum ApiTransactionError {\n  PartialTransactionFailure = 'PartialTransactionFailure',\n  IncorrectDeviceTime = 'IncorrectDeviceTime',\n  InsufficientBalance = 'InsufficientBalance',\n  UnsuccesfulTransfer = 'UnsuccesfulTransfer',\n  UnsupportedHardwarePayload = 'UnsupportedHardwarePayload',\n  Unexpected = 'Unexpected',\n}\n\nexport type ApiAnyDisplayError = ApiTransactionDraftError | ApiTransactionError;\n","// Version 3.1.2\n/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\n(function(root) {\n  \"use strict\";\n\n  function checkInt(value) {\n    return (parseInt(value) === value);\n  }\n\n  function checkInts(arrayish) {\n    if (!checkInt(arrayish.length)) { return false; }\n\n    for (var i = 0; i < arrayish.length; i++) {\n      if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function coerceArray(arg, copy) {\n\n    // ArrayBuffer view\n    if (arg.buffer && arg.name === 'Uint8Array') {\n\n      if (copy) {\n        if (arg.slice) {\n          arg = arg.slice();\n        } else {\n          arg = Array.prototype.slice.call(arg);\n        }\n      }\n\n      return arg;\n    }\n\n    // It's an array; check it is a valid representation of a byte\n    if (Array.isArray(arg)) {\n      if (!checkInts(arg)) {\n        throw new Error('Array contains invalid value: ' + arg);\n      }\n\n      return new Uint8Array(arg);\n    }\n\n    // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n    if (checkInt(arg.length) && checkInts(arg)) {\n      return new Uint8Array(arg);\n    }\n\n    throw new Error('unsupported array-like object');\n  }\n\n  function createArray(length) {\n    return new Uint8Array(length);\n  }\n\n  function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n    if (sourceStart != null || sourceEnd != null) {\n      if (sourceArray.slice) {\n        sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n      } else {\n        sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n      }\n    }\n    targetArray.set(sourceArray, targetStart);\n  }\n\n\n\n  var convertUtf8 = (function() {\n    function toBytes(text) {\n      var result = [], i = 0;\n      text = encodeURI(text);\n      while (i < text.length) {\n        var c = text.charCodeAt(i++);\n\n        // if it is a % sign, encode the following 2 bytes as a hex value\n        if (c === 37) {\n          result.push(parseInt(text.substr(i, 2), 16))\n          i += 2;\n\n          // otherwise, just the actual byte\n        } else {\n          result.push(c)\n        }\n      }\n\n      return coerceArray(result);\n    }\n\n    function fromBytes(bytes) {\n      var result = [], i = 0;\n\n      while (i < bytes.length) {\n        var c = bytes[i];\n\n        if (c < 128) {\n          result.push(String.fromCharCode(c));\n          i++;\n        } else if (c > 191 && c < 224) {\n          result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n          i += 2;\n        } else {\n          result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n          i += 3;\n        }\n      }\n\n      return result.join('');\n    }\n\n    return {\n      toBytes: toBytes,\n      fromBytes: fromBytes,\n    }\n  })();\n\n  var convertHex = (function() {\n    function toBytes(text) {\n      var result = [];\n      for (var i = 0; i < text.length; i += 2) {\n        result.push(parseInt(text.substr(i, 2), 16));\n      }\n\n      return result;\n    }\n\n    // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n    var Hex = '0123456789abcdef';\n\n    function fromBytes(bytes) {\n      var result = [];\n      for (var i = 0; i < bytes.length; i++) {\n        var v = bytes[i];\n        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n      }\n      return result.join('');\n    }\n\n    return {\n      toBytes: toBytes,\n      fromBytes: fromBytes,\n    }\n  })();\n\n\n  // Number of rounds by keysize\n  var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n  // Round constant words\n  var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n  // S-box and Inverse S-box (S is for Substitution)\n  var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n  var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n  // Transformations for encryption\n  var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n  var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n  var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n  var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n  // Transformations for decryption\n  var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n  var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n  var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n  var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n  // Transformations for decryption key expansion\n  var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n  var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n  var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n  var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n  function convertToInt32(bytes) {\n    var result = [];\n    for (var i = 0; i < bytes.length; i += 4) {\n      result.push(\n        (bytes[i    ] << 24) |\n        (bytes[i + 1] << 16) |\n        (bytes[i + 2] <<  8) |\n        bytes[i + 3]\n      );\n    }\n    return result;\n  }\n\n  var AES = function(key) {\n    if (!(this instanceof AES)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    Object.defineProperty(this, 'key', {\n      value: coerceArray(key, true)\n    });\n\n    this._prepare();\n  }\n\n\n  AES.prototype._prepare = function() {\n\n    var rounds = numberOfRounds[this.key.length];\n    if (rounds == null) {\n      throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n    }\n\n    // encryption round keys\n    this._Ke = [];\n\n    // decryption round keys\n    this._Kd = [];\n\n    for (var i = 0; i <= rounds; i++) {\n      this._Ke.push([0, 0, 0, 0]);\n      this._Kd.push([0, 0, 0, 0]);\n    }\n\n    var roundKeyCount = (rounds + 1) * 4;\n    var KC = this.key.length / 4;\n\n    // convert the key into ints\n    var tk = convertToInt32(this.key);\n\n    // copy values into round key arrays\n    var index;\n    for (var i = 0; i < KC; i++) {\n      index = i >> 2;\n      this._Ke[index][i % 4] = tk[i];\n      this._Kd[rounds - index][i % 4] = tk[i];\n    }\n\n    // key expansion (fips-197 section 5.2)\n    var rconpointer = 0;\n    var t = KC, tt;\n    while (t < roundKeyCount) {\n      tt = tk[KC - 1];\n      tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n        (S[(tt >>  8) & 0xFF] << 16) ^\n        (S[ tt        & 0xFF] <<  8) ^\n        S[(tt >> 24) & 0xFF]        ^\n        (rcon[rconpointer] << 24));\n      rconpointer += 1;\n\n      // key expansion (for non-256 bit)\n      if (KC != 8) {\n        for (var i = 1; i < KC; i++) {\n          tk[i] ^= tk[i - 1];\n        }\n\n        // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n      } else {\n        for (var i = 1; i < (KC / 2); i++) {\n          tk[i] ^= tk[i - 1];\n        }\n        tt = tk[(KC / 2) - 1];\n\n        tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n          (S[(tt >>  8) & 0xFF] <<  8) ^\n          (S[(tt >> 16) & 0xFF] << 16) ^\n          (S[(tt >> 24) & 0xFF] << 24));\n\n        for (var i = (KC / 2) + 1; i < KC; i++) {\n          tk[i] ^= tk[i - 1];\n        }\n      }\n\n      // copy values into round key arrays\n      var i = 0, r, c;\n      while (i < KC && t < roundKeyCount) {\n        r = t >> 2;\n        c = t % 4;\n        this._Ke[r][c] = tk[i];\n        this._Kd[rounds - r][c] = tk[i++];\n        t++;\n      }\n    }\n\n    // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n    for (var r = 1; r < rounds; r++) {\n      for (var c = 0; c < 4; c++) {\n        tt = this._Kd[r][c];\n        this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n          U2[(tt >> 16) & 0xFF] ^\n          U3[(tt >>  8) & 0xFF] ^\n          U4[ tt        & 0xFF]);\n      }\n    }\n  }\n\n  AES.prototype.encrypt = function(plaintext) {\n    if (plaintext.length != 16) {\n      throw new Error('invalid plaintext size (must be 16 bytes)');\n    }\n\n    var rounds = this._Ke.length - 1;\n    var a = [0, 0, 0, 0];\n\n    // convert plaintext to (ints ^ key)\n    var t = convertToInt32(plaintext);\n    for (var i = 0; i < 4; i++) {\n      t[i] ^= this._Ke[0][i];\n    }\n\n    // apply round transforms\n    for (var r = 1; r < rounds; r++) {\n      for (var i = 0; i < 4; i++) {\n        a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n          T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n          T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n          T4[ t[(i + 3) % 4]        & 0xff] ^\n          this._Ke[r][i]);\n      }\n      t = a.slice();\n    }\n\n    // the last round is special\n    var result = createArray(16), tt;\n    for (var i = 0; i < 4; i++) {\n      tt = this._Ke[rounds][i];\n      result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n      result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n      result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n      result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n    }\n\n    return result;\n  }\n\n  AES.prototype.decrypt = function(ciphertext) {\n    if (ciphertext.length != 16) {\n      throw new Error('invalid ciphertext size (must be 16 bytes)');\n    }\n\n    var rounds = this._Kd.length - 1;\n    var a = [0, 0, 0, 0];\n\n    // convert plaintext to (ints ^ key)\n    var t = convertToInt32(ciphertext);\n    for (var i = 0; i < 4; i++) {\n      t[i] ^= this._Kd[0][i];\n    }\n\n    // apply round transforms\n    for (var r = 1; r < rounds; r++) {\n      for (var i = 0; i < 4; i++) {\n        a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n          T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n          T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n          T8[ t[(i + 1) % 4]        & 0xff] ^\n          this._Kd[r][i]);\n      }\n      t = a.slice();\n    }\n\n    // the last round is special\n    var result = createArray(16), tt;\n    for (var i = 0; i < 4; i++) {\n      tt = this._Kd[rounds][i];\n      result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n      result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n      result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n      result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n    }\n\n    return result;\n  }\n\n\n  /**\n   *  Mode Of Operation - Electonic Codebook (ECB)\n   */\n  var ModeOfOperationECB = function(key) {\n    if (!(this instanceof ModeOfOperationECB)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    this.description = \"Electronic Code Block\";\n    this.name = \"ecb\";\n\n    this._aes = new AES(key);\n  }\n\n  ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n    plaintext = coerceArray(plaintext);\n\n    if ((plaintext.length % 16) !== 0) {\n      throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n    }\n\n    var ciphertext = createArray(plaintext.length);\n    var block = createArray(16);\n\n    for (var i = 0; i < plaintext.length; i += 16) {\n      copyArray(plaintext, block, 0, i, i + 16);\n      block = this._aes.encrypt(block);\n      copyArray(block, ciphertext, i);\n    }\n\n    return ciphertext;\n  }\n\n  ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n    ciphertext = coerceArray(ciphertext);\n\n    if ((ciphertext.length % 16) !== 0) {\n      throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n    }\n\n    var plaintext = createArray(ciphertext.length);\n    var block = createArray(16);\n\n    for (var i = 0; i < ciphertext.length; i += 16) {\n      copyArray(ciphertext, block, 0, i, i + 16);\n      block = this._aes.decrypt(block);\n      copyArray(block, plaintext, i);\n    }\n\n    return plaintext;\n  }\n\n\n  /**\n   *  Mode Of Operation - Cipher Block Chaining (CBC)\n   */\n  var ModeOfOperationCBC = function(key, iv) {\n    if (!(this instanceof ModeOfOperationCBC)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    this.description = \"Cipher Block Chaining\";\n    this.name = \"cbc\";\n\n    if (!iv) {\n      iv = createArray(16);\n\n    } else if (iv.length != 16) {\n      throw new Error('invalid initialation vector size (must be 16 bytes)');\n    }\n\n    this._lastCipherblock = coerceArray(iv, true);\n\n    this._aes = new AES(key);\n  }\n\n  ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n    plaintext = coerceArray(plaintext);\n\n    if ((plaintext.length % 16) !== 0) {\n      throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n    }\n\n    var ciphertext = createArray(plaintext.length);\n    var block = createArray(16);\n\n    for (var i = 0; i < plaintext.length; i += 16) {\n      copyArray(plaintext, block, 0, i, i + 16);\n\n      for (var j = 0; j < 16; j++) {\n        block[j] ^= this._lastCipherblock[j];\n      }\n\n      this._lastCipherblock = this._aes.encrypt(block);\n      copyArray(this._lastCipherblock, ciphertext, i);\n    }\n\n    return ciphertext;\n  }\n\n  ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n    ciphertext = coerceArray(ciphertext);\n\n    if ((ciphertext.length % 16) !== 0) {\n      throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n    }\n\n    var plaintext = createArray(ciphertext.length);\n    var block = createArray(16);\n\n    for (var i = 0; i < ciphertext.length; i += 16) {\n      copyArray(ciphertext, block, 0, i, i + 16);\n      block = this._aes.decrypt(block);\n\n      for (var j = 0; j < 16; j++) {\n        plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n      }\n\n      copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n    }\n\n    return plaintext;\n  }\n\n\n  /**\n   *  Mode Of Operation - Cipher Feedback (CFB)\n   */\n  var ModeOfOperationCFB = function(key, iv, segmentSize) {\n    if (!(this instanceof ModeOfOperationCFB)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    this.description = \"Cipher Feedback\";\n    this.name = \"cfb\";\n\n    if (!iv) {\n      iv = createArray(16);\n\n    } else if (iv.length != 16) {\n      throw new Error('invalid initialation vector size (must be 16 size)');\n    }\n\n    if (!segmentSize) { segmentSize = 1; }\n\n    this.segmentSize = segmentSize;\n\n    this._shiftRegister = coerceArray(iv, true);\n\n    this._aes = new AES(key);\n  }\n\n  ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n    if ((plaintext.length % this.segmentSize) != 0) {\n      throw new Error('invalid plaintext size (must be segmentSize bytes)');\n    }\n\n    var encrypted = coerceArray(plaintext, true);\n\n    var xorSegment;\n    for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n      xorSegment = this._aes.encrypt(this._shiftRegister);\n      for (var j = 0; j < this.segmentSize; j++) {\n        encrypted[i + j] ^= xorSegment[j];\n      }\n\n      // Shift the register\n      copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n      copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n    }\n\n    return encrypted;\n  }\n\n  ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n    if ((ciphertext.length % this.segmentSize) != 0) {\n      throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n    }\n\n    var plaintext = coerceArray(ciphertext, true);\n\n    var xorSegment;\n    for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n      xorSegment = this._aes.encrypt(this._shiftRegister);\n\n      for (var j = 0; j < this.segmentSize; j++) {\n        plaintext[i + j] ^= xorSegment[j];\n      }\n\n      // Shift the register\n      copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n      copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n    }\n\n    return plaintext;\n  }\n\n  /**\n   *  Mode Of Operation - Output Feedback (OFB)\n   */\n  var ModeOfOperationOFB = function(key, iv) {\n    if (!(this instanceof ModeOfOperationOFB)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    this.description = \"Output Feedback\";\n    this.name = \"ofb\";\n\n    if (!iv) {\n      iv = createArray(16);\n\n    } else if (iv.length != 16) {\n      throw new Error('invalid initialation vector size (must be 16 bytes)');\n    }\n\n    this._lastPrecipher = coerceArray(iv, true);\n    this._lastPrecipherIndex = 16;\n\n    this._aes = new AES(key);\n  }\n\n  ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n    var encrypted = coerceArray(plaintext, true);\n\n    for (var i = 0; i < encrypted.length; i++) {\n      if (this._lastPrecipherIndex === 16) {\n        this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n        this._lastPrecipherIndex = 0;\n      }\n      encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n    }\n\n    return encrypted;\n  }\n\n  // Decryption is symetric\n  ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n  /**\n   *  Counter object for CTR common mode of operation\n   */\n  var Counter = function(initialValue) {\n    if (!(this instanceof Counter)) {\n      throw Error('Counter must be instanitated with `new`');\n    }\n\n    // We allow 0, but anything false-ish uses the default 1\n    if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n    if (typeof(initialValue) === 'number') {\n      this._counter = createArray(16);\n      this.setValue(initialValue);\n\n    } else {\n      this.setBytes(initialValue);\n    }\n  }\n\n  Counter.prototype.setValue = function(value) {\n    if (typeof(value) !== 'number' || parseInt(value) != value) {\n      throw new Error('invalid counter value (must be an integer)');\n    }\n\n    // We cannot safely handle numbers beyond the safe range for integers\n    if (value > Number.MAX_SAFE_INTEGER) {\n      throw new Error('integer value out of safe range');\n    }\n\n    for (var index = 15; index >= 0; --index) {\n      this._counter[index] = value % 256;\n      value = parseInt(value / 256);\n    }\n  }\n\n  Counter.prototype.setBytes = function(bytes) {\n    bytes = coerceArray(bytes, true);\n\n    if (bytes.length != 16) {\n      throw new Error('invalid counter bytes size (must be 16 bytes)');\n    }\n\n    this._counter = bytes;\n  };\n\n  Counter.prototype.increment = function() {\n    for (var i = 15; i >= 0; i--) {\n      if (this._counter[i] === 255) {\n        this._counter[i] = 0;\n      } else {\n        this._counter[i]++;\n        break;\n      }\n    }\n  }\n\n\n  /**\n   *  Mode Of Operation - Counter (CTR)\n   */\n  var ModeOfOperationCTR = function(key, counter) {\n    if (!(this instanceof ModeOfOperationCTR)) {\n      throw Error('AES must be instanitated with `new`');\n    }\n\n    this.description = \"Counter\";\n    this.name = \"ctr\";\n\n    if (!(counter instanceof Counter)) {\n      counter = new Counter(counter)\n    }\n\n    this._counter = counter;\n\n    this._remainingCounter = null;\n    this._remainingCounterIndex = 16;\n\n    this._aes = new AES(key);\n  }\n\n  ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n    var encrypted = coerceArray(plaintext, true);\n\n    for (var i = 0; i < encrypted.length; i++) {\n      if (this._remainingCounterIndex === 16) {\n        this._remainingCounter = this._aes.encrypt(this._counter._counter);\n        this._remainingCounterIndex = 0;\n        this._counter.increment();\n      }\n      encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n    }\n\n    return encrypted;\n  }\n\n  // Decryption is symetric\n  ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n  ///////////////////////\n  // Padding\n\n  // See:https://tools.ietf.org/html/rfc2315\n  function pkcs7pad(data) {\n    data = coerceArray(data, true);\n    var padder = 16 - (data.length % 16);\n    var result = createArray(data.length + padder);\n    copyArray(data, result);\n    for (var i = data.length; i < result.length; i++) {\n      result[i] = padder;\n    }\n    return result;\n  }\n\n  function pkcs7strip(data) {\n    data = coerceArray(data, true);\n    if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n    var padder = data[data.length - 1];\n    if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n    var length = data.length - padder;\n    for (var i = 0; i < padder; i++) {\n      if (data[length + i] !== padder) {\n        throw new Error('PKCS#7 invalid padding byte');\n      }\n    }\n\n    var result = createArray(length);\n    copyArray(data, result, 0, 0, length);\n    return result;\n  }\n\n  ///////////////////////\n  // Exporting\n\n\n  // The block cipher\n  var aesjs = {\n    AES: AES,\n    Counter: Counter,\n\n    ModeOfOperation: {\n      ecb: ModeOfOperationECB,\n      cbc: ModeOfOperationCBC,\n      cfb: ModeOfOperationCFB,\n      ofb: ModeOfOperationOFB,\n      ctr: ModeOfOperationCTR\n    },\n\n    utils: {\n      hex: convertHex,\n      utf8: convertUtf8\n    },\n\n    padding: {\n      pkcs7: {\n        pad: pkcs7pad,\n        strip: pkcs7strip\n      }\n    },\n\n    _arrayTest: {\n      coerceArray: coerceArray,\n      createArray: createArray,\n      copyArray: copyArray,\n    }\n  };\n\n\n  // node.js\n  if (typeof exports !== 'undefined') {\n    module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n  } else if (typeof(define) === 'function' && define.amd) {\n    define([], function() { return aesjs; });\n\n    // Web Browsers\n  } else {\n\n    // If there was an existing library at \"aesjs\" make sure it's still available\n    if (root.aesjs) {\n      aesjs._aesjs = root.aesjs;\n    }\n\n    root.aesjs = aesjs;\n  }\n\n\n})(this);\n","import axios from 'axios';\nimport buildFullPath from 'axios/lib/core/buildFullPath';\nimport settle from 'axios/lib/core/settle';\nimport buildURL from 'axios/lib/helpers/buildURL';\nimport { isFormData, isStandardBrowserEnv, isUndefined } from 'axios/lib/utils';\n\n/**\n * - Create a request object\n * - Get response body\n * - Check if timeout\n */\nexport default async function fetchAdapter(config) {\n  const request = createRequest(config);\n  const promiseChain = [getResponse(request, config)];\n\n  if (config.timeout && config.timeout > 0) {\n    promiseChain.push(\n      new Promise((res) => {\n        setTimeout(() => {\n          const message = config.timeoutErrorMessage\n            ? config.timeoutErrorMessage\n            : `timeout of ${config.timeout}ms exceeded`;\n          res(createError(message, config, 'ECONNABORTED', request));\n        }, config.timeout);\n      }),\n    );\n  }\n\n  const data = await Promise.race(promiseChain);\n  return new Promise((resolve, reject) => {\n    if (data instanceof Error) {\n      reject(data);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      Object.prototype.toString.call(config.settle) === '[object Function]'\n        ? config.settle(resolve, reject, data)\n        : settle(resolve, reject, data);\n    }\n  });\n}\n\n/**\n * Fetch API stage two is to get response body. This funtion tries to retrieve\n * response body based on response's type\n */\nasync function getResponse(request, config) {\n  let stageOne;\n  try {\n    stageOne = await fetch(request);\n  } catch (e) {\n    return createError('Network Error', config, 'ERR_NETWORK', request);\n  }\n\n  const response = {\n    ok: stageOne.ok,\n    status: stageOne.status,\n    statusText: stageOne.statusText,\n    headers: new Headers(stageOne.headers), // Make a copy of headers\n    config,\n    request,\n  };\n\n  if (stageOne.status >= 200 && stageOne.status !== 204) {\n    switch (config.responseType) {\n      case 'arraybuffer':\n        response.data = await stageOne.arrayBuffer();\n        break;\n      case 'blob':\n        response.data = await stageOne.blob();\n        break;\n      case 'json':\n        response.data = await stageOne.json();\n        break;\n      case 'formData':\n        response.data = await stageOne.formData();\n        break;\n      default:\n        response.data = await stageOne.text();\n        break;\n    }\n  }\n\n  return response;\n}\n\n/**\n * This function will create a Request object based on configuration's axios\n */\nfunction createRequest(config) {\n  const headers = new Headers(config.headers);\n\n  // HTTP basic authentication\n  if (config.auth) {\n    const username = config.auth.username || '';\n    const password = config.auth.password ? decodeURI(encodeURIComponent(config.auth.password)) : '';\n    headers.set('Authorization', `Basic ${btoa(`${username}:${password}`)}`);\n  }\n\n  const method = config.method.toUpperCase();\n  const options = {\n    headers,\n    method,\n  };\n  if (method !== 'GET' && method !== 'HEAD') {\n    options.body = config.data;\n\n    // In these cases the browser will automatically set the correct Content-Type,\n    // but only if that header hasn't been set yet. So that's why we're deleting it.\n    if (isFormData(options.body) && isStandardBrowserEnv()) {\n      headers.delete('Content-Type');\n    }\n  }\n  if (config.mode) {\n    options.mode = config.mode;\n  }\n  if (config.cache) {\n    options.cache = config.cache;\n  }\n  if (config.integrity) {\n    options.integrity = config.integrity;\n  }\n  if (config.redirect) {\n    options.redirect = config.redirect;\n  }\n  if (config.referrer) {\n    options.referrer = config.referrer;\n  }\n  // This config is similar to XHR’s withCredentials flag, but with three available values instead of two.\n  // So if withCredentials is not set, default value 'same-origin' will be used\n  if (!isUndefined(config.withCredentials)) {\n    options.credentials = config.withCredentials ? 'include' : 'omit';\n  }\n\n  const fullPath = buildFullPath(config.baseURL, config.url);\n  const url = buildURL(fullPath, config.params, config.paramsSerializer);\n\n  // Expected browser to throw error if there is any wrong configuration value\n  return new Request(url, options);\n}\n\n/**\n * Note:\n *\n *   From version >= 0.27.0, createError function is replaced by AxiosError class.\n *   So I copy the old createError function here for backward compatible.\n *\n *\n *\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nfunction createError(message, config, code, request, response) {\n  if (axios.AxiosError && typeof axios.AxiosError === 'function') {\n    return new axios.AxiosError(message, axios.AxiosError[code], config, request, response);\n  }\n\n  const error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n}\n\n/**\n *\n * Note:\n *\n *   This function is for backward compatible.\n *\n *\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nfunction enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      // eslint-disable-next-line no-null/no-null\n      status: this.response && this.response.status ? this.response.status : null,\n    };\n  };\n  return error;\n}\n","// Version 1.7.3\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n      (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.nobleEd25519 = {}));\n})(this, (function (exports) { 'use strict';\n\n  const _nodeResolve_empty = {};\n\n  const nodeCrypto = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    'default': _nodeResolve_empty\n  });\n\n  /*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n  const _0n = BigInt(0);\n  const _1n = BigInt(1);\n  const _2n = BigInt(2);\n  const _8n = BigInt(8);\n  const CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\n  const CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  });\n  const POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n  const SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n  BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\n  const SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n  const INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n  const ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n  const D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n  class ExtendedPoint {\n    constructor(x, y, z, t) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.t = t;\n    }\n    static fromAffine(p) {\n      if (!(p instanceof Point)) {\n        throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n      }\n      if (p.equals(Point.ZERO))\n        return ExtendedPoint.ZERO;\n      return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n      const toInv = invertBatch(points.map((p) => p.z));\n      return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n      return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n      assertExtPoint(other);\n      const { x: X1, y: Y1, z: Z1 } = this;\n      const { x: X2, y: Y2, z: Z2 } = other;\n      const X1Z2 = mod(X1 * Z2);\n      const X2Z1 = mod(X2 * Z1);\n      const Y1Z2 = mod(Y1 * Z2);\n      const Y2Z1 = mod(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n      return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n      const { x: X1, y: Y1, z: Z1 } = this;\n      const { a } = CURVE;\n      const A = mod(X1 * X1);\n      const B = mod(Y1 * Y1);\n      const C = mod(_2n * mod(Z1 * Z1));\n      const D = mod(a * A);\n      const x1y1 = X1 + Y1;\n      const E = mod(mod(x1y1 * x1y1) - A - B);\n      const G = D + B;\n      const F = G - C;\n      const H = D - B;\n      const X3 = mod(E * F);\n      const Y3 = mod(G * H);\n      const T3 = mod(E * H);\n      const Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n      assertExtPoint(other);\n      const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n      const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n      const A = mod((Y1 - X1) * (Y2 + X2));\n      const B = mod((Y1 + X1) * (Y2 - X2));\n      const F = mod(B - A);\n      if (F === _0n)\n        return this.double();\n      const C = mod(Z1 * _2n * T2);\n      const D = mod(T1 * _2n * Z2);\n      const E = D + C;\n      const G = B + A;\n      const H = D - C;\n      const X3 = mod(E * F);\n      const Y3 = mod(G * H);\n      const T3 = mod(E * H);\n      const Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n      const windows = 1 + 256 / W;\n      const points = [];\n      let p = this;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        for (let i = 1; i < 2 ** (W - 1); i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    }\n    wNAF(n, affinePoint) {\n      if (!affinePoint && this.equals(ExtendedPoint.BASE))\n        affinePoint = Point.BASE;\n      const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n      if (256 % W) {\n        throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n      }\n      let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n      if (!precomputes) {\n        precomputes = this.precomputeWindow(W);\n        if (affinePoint && W !== 1) {\n          precomputes = ExtendedPoint.normalizeZ(precomputes);\n          pointPrecomputes.set(affinePoint, precomputes);\n        }\n      }\n      let p = ExtendedPoint.ZERO;\n      let f = ExtendedPoint.BASE;\n      const windows = 1 + 256 / W;\n      const windowSize = 2 ** (W - 1);\n      const mask = BigInt(2 ** W - 1);\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        let wbits = Number(n & mask);\n        n >>= shiftBy;\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1;\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        }\n        else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n      return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n      let n = normalizeScalar(scalar, CURVE.l, false);\n      const G = ExtendedPoint.BASE;\n      const P0 = ExtendedPoint.ZERO;\n      if (n === _0n)\n        return P0;\n      if (this.equals(P0) || n === _1n)\n        return this;\n      if (this.equals(G))\n        return this.wNAF(n);\n      let p = P0;\n      let d = this;\n      while (n > _0n) {\n        if (n & _1n)\n          p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n    isSmallOrder() {\n      return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n      let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n      if (CURVE.l % _2n)\n        p = p.add(this);\n      return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n      const { x, y, z } = this;\n      const is0 = this.equals(ExtendedPoint.ZERO);\n      if (invZ == null)\n        invZ = is0 ? _8n : invert(z);\n      const ax = mod(x * invZ);\n      const ay = mod(y * invZ);\n      const zz = mod(z * invZ);\n      if (is0)\n        return Point.ZERO;\n      if (zz !== _1n)\n        throw new Error('invZ was invalid');\n      return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n      legacyRist();\n    }\n    toRistrettoBytes() {\n      legacyRist();\n    }\n    fromRistrettoHash() {\n      legacyRist();\n    }\n  }\n  ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\n  ExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\n  function constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n  }\n  function assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n      throw new TypeError('ExtendedPoint expected');\n  }\n  function assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n      throw new TypeError('RistrettoPoint expected');\n  }\n  function legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n  }\n  class RistrettoPoint {\n    constructor(ep) {\n      this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n      const { d } = CURVE;\n      const r = mod(SQRT_M1 * r0 * r0);\n      const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n      let c = BigInt(-1);\n      const D = mod((c - d * r) * mod(r + d));\n      let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n      let s_ = mod(s * r0);\n      if (!edIsNegative(s_))\n        s_ = mod(-s_);\n      if (!Ns_D_is_sq)\n        s = s_;\n      if (!Ns_D_is_sq)\n        c = r;\n      const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n      const s2 = s * s;\n      const W0 = mod((s + s) * D);\n      const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n      const W2 = mod(_1n - s2);\n      const W3 = mod(_1n + s2);\n      return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n      hex = ensureBytes(hex, 64);\n      const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n      const R1 = this.calcElligatorRistrettoMap(r1);\n      const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n      const R2 = this.calcElligatorRistrettoMap(r2);\n      return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n      hex = ensureBytes(hex, 32);\n      const { a, d } = CURVE;\n      const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n      const s = bytes255ToNumberLE(hex);\n      if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n        throw new Error(emsg);\n      const s2 = mod(s * s);\n      const u1 = mod(_1n + a * s2);\n      const u2 = mod(_1n - a * s2);\n      const u1_2 = mod(u1 * u1);\n      const u2_2 = mod(u2 * u2);\n      const v = mod(a * d * u1_2 - u2_2);\n      const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n      const Dx = mod(I * u2);\n      const Dy = mod(I * Dx * v);\n      let x = mod((s + s) * Dx);\n      if (edIsNegative(x))\n        x = mod(-x);\n      const y = mod(u1 * Dy);\n      const t = mod(x * y);\n      if (!isValid || edIsNegative(t) || y === _0n)\n        throw new Error(emsg);\n      return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n      let { x, y, z, t } = this.ep;\n      const u1 = mod(mod(z + y) * mod(z - y));\n      const u2 = mod(x * y);\n      const u2sq = mod(u2 * u2);\n      const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n      const D1 = mod(invsqrt * u1);\n      const D2 = mod(invsqrt * u2);\n      const zInv = mod(D1 * D2 * t);\n      let D;\n      if (edIsNegative(t * zInv)) {\n        let _x = mod(y * SQRT_M1);\n        let _y = mod(x * SQRT_M1);\n        x = _x;\n        y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      }\n      else {\n        D = D2;\n      }\n      if (edIsNegative(x * zInv))\n        y = mod(-y);\n      let s = mod((z - y) * D);\n      if (edIsNegative(s))\n        s = mod(-s);\n      return numberTo32BytesLE(s);\n    }\n    toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n      return this.toHex();\n    }\n    equals(other) {\n      assertRstPoint(other);\n      const a = this.ep;\n      const b = other.ep;\n      const one = mod(a.x * b.y) === mod(a.y * b.x);\n      const two = mod(a.y * b.y) === mod(a.x * b.x);\n      return one || two;\n    }\n    add(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n      return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n      return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n  }\n  RistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\n  RistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\n  const pointPrecomputes = new WeakMap();\n  class Point {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n    _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n      const { d, P } = CURVE;\n      hex = ensureBytes(hex, 32);\n      const normed = hex.slice();\n      normed[31] = hex[31] & ~0x80;\n      const y = bytesToNumberLE(normed);\n      if (strict && y >= P)\n        throw new Error('Expected 0 < hex < P');\n      if (!strict && y >= POW_2_256)\n        throw new Error('Expected 0 < hex < 2**256');\n      const y2 = mod(y * y);\n      const u = mod(y2 - _1n);\n      const v = mod(d * y2 + _1n);\n      let { isValid, value: x } = uvRatio(u, v);\n      if (!isValid)\n        throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n;\n      const isLastByteOdd = (hex[31] & 0x80) !== 0;\n      if (isLastByteOdd !== isXOdd) {\n        x = mod(-x);\n      }\n      return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n      return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n      const bytes = numberTo32BytesLE(this.y);\n      bytes[31] |= this.x & _1n ? 0x80 : 0;\n      return bytes;\n    }\n    toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n      const { y } = this;\n      const u = mod((_1n + y) * invert(_1n - y));\n      return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n      return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n      return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n      return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n      return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    multiply(scalar) {\n      return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);\n  Point.ZERO = new Point(_0n, _1n);\n  class Signature {\n    constructor(r, s) {\n      this.r = r;\n      this.s = s;\n      this.assertValidity();\n    }\n    static fromHex(hex) {\n      const bytes = ensureBytes(hex, 64);\n      const r = Point.fromHex(bytes.slice(0, 32), false);\n      const s = bytesToNumberLE(bytes.slice(32, 64));\n      return new Signature(r, s);\n    }\n    assertValidity() {\n      const { r, s } = this;\n      if (!(r instanceof Point))\n        throw new Error('Expected Point instance');\n      normalizeScalar(s, CURVE.l, false);\n      return this;\n    }\n    toRawBytes() {\n      const u8 = new Uint8Array(64);\n      u8.set(this.r.toRawBytes());\n      u8.set(numberTo32BytesLE(this.s), 32);\n      return u8;\n    }\n    toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }\n  function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n      throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n      return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n      const arr = arrays[i];\n      result.set(arr, pad);\n      pad += arr.length;\n    }\n    return result;\n  }\n  const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n  function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n      throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n      hex += hexes[uint8a[i]];\n    }\n    return hex;\n  }\n  function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n      throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n      throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n      const j = i * 2;\n      const hexByte = hex.slice(j, j + 2);\n      const byte = Number.parseInt(hexByte, 16);\n      if (Number.isNaN(byte) || byte < 0)\n        throw new Error('Invalid byte sequence');\n      array[i] = byte;\n    }\n    return array;\n  }\n  function numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n  }\n  function numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n  }\n  function edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n  }\n  function bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n      throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n  }\n  const MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n  function bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n  }\n  function mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n  }\n  function invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n      throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, u = _1n;\n    while (a !== _0n) {\n      const q = b / a;\n      const r = b % a;\n      const m = x - u * q;\n      b = a, a = r, x = u, u = m;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n      throw new Error('invert: does not exist');\n    return mod(x, modulo);\n  }\n  function invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n      if (num === _0n)\n        return acc;\n      tmp[i] = acc;\n      return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n      if (num === _0n)\n        return acc;\n      tmp[i] = mod(acc * tmp[i], p);\n      return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n  }\n  function pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n      res *= res;\n      res %= P;\n    }\n    return res;\n  }\n  function pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n  }\n  function uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n      x = root1;\n    if (useRoot2 || noRoot)\n      x = root2;\n    if (edIsNegative(x))\n      x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n  }\n  function invertSqrt(number) {\n    return uvRatio(_1n, number);\n  }\n  function modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n  }\n  function equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n      return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n      if (b1[i] !== b2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n      throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n  }\n  function normalizeScalar(num, max, strict = true) {\n    if (!max)\n      throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n      num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n      if (strict) {\n        if (_0n < num)\n          return num;\n      }\n      else {\n        if (_0n <= num)\n          return num;\n      }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n  }\n  function adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n  }\n  function decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n  }\n  function checkPrivateKey(key) {\n    key =\n      typeof key === 'bigint' || typeof key === 'number'\n        ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n        : ensureBytes(key);\n    if (key.length !== 32)\n      throw new Error(`Expected 32 bytes`);\n    return key;\n  }\n  function getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n  }\n  let _sha512Sync;\n  function sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n      throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n  }\n  async function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n  }\n  function getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n  }\n  async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n  }\n  function getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n  }\n  async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n  }\n  function signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n  }\n  function prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n      publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n  }\n  function finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n  }\n  async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n  }\n  function verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n  }\n  const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n  };\n  async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n  }\n  Point.BASE._setWindowSize(8);\n  function cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n  }\n  function montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n      const A = x_2 + z_2;\n      const AA = mod(A * A);\n      const B = x_2 - z_2;\n      const BB = mod(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = mod(D * A);\n      const CB = mod(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = mod(dacb * dacb);\n      z_3 = mod(x_1 * mod(da_cb * da_cb));\n      x_2 = mod(AA * BB);\n      z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n  }\n  function encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n  }\n  function decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n  }\n  const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n      const u = decodeUCoordinate(publicKey);\n      const p = decodeScalar25519(privateKey);\n      const pu = montgomeryLadder(u, p);\n      if (pu === _0n)\n        throw new Error('Invalid private or public key received');\n      return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n      return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n  };\n  const crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n  };\n  const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n      '0100000000000000000000000000000000000000000000000000000000000000',\n      'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n      '0000000000000000000000000000000000000000000000000000000000000080',\n      '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n      'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n      '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n      '0000000000000000000000000000000000000000000000000000000000000000',\n      'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n      hash = ensureBytes(hash);\n      if (hash.length < 40 || hash.length > 1024)\n        throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n      return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n      if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n      }\n      else if (crypto.node) {\n        const { randomBytes } = crypto.node;\n        return new Uint8Array(randomBytes(bytesLength).buffer);\n      }\n      else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n      }\n    },\n    randomPrivateKey: () => {\n      return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n      const message = concatBytes(...messages);\n      if (crypto.web) {\n        const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n        return new Uint8Array(buffer);\n      }\n      else if (crypto.node) {\n        return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n      }\n      else {\n        throw new Error(\"The environment doesn't have sha512 function\");\n      }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n      const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n      cached._setWindowSize(windowSize);\n      cached.multiply(_2n);\n      return cached;\n    },\n    sha512Sync: undefined,\n  };\n  Object.defineProperties(utils, {\n    sha512Sync: {\n      configurable: false,\n      get() {\n        return _sha512Sync;\n      },\n      set(val) {\n        if (!_sha512Sync)\n          _sha512Sync = val;\n      },\n    },\n  });\n\n  exports.CURVE = CURVE;\n  exports.ExtendedPoint = ExtendedPoint;\n  exports.Point = Point;\n  exports.RistrettoPoint = RistrettoPoint;\n  exports.Signature = Signature;\n  exports.curve25519 = curve25519;\n  exports.getPublicKey = getPublicKey;\n  exports.getSharedSecret = getSharedSecret;\n  exports.sign = sign;\n  exports.sync = sync;\n  exports.utils = utils;\n  exports.verify = verify;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import type { Browser } from 'webextension-polyfill';\n\n// eslint-disable-next-line global-require\nconst browser = require('./browser') as Browser;\n\nexport default browser;\n","export function createCallbackManager() {\n  const callbacks = new Set<AnyToVoidFunction>();\n\n  function addCallback(cb: AnyToVoidFunction) {\n    callbacks.add(cb);\n\n    return () => {\n      removeCallback(cb);\n    };\n  }\n\n  function removeCallback(cb: AnyToVoidFunction) {\n    callbacks.delete(cb);\n  }\n\n  function runCallbacks(...args: any[]) {\n    callbacks.forEach((callback) => {\n      callback(...args);\n    });\n  }\n\n  function hasCallbacks() {\n    return Boolean(callbacks.size);\n  }\n\n  return {\n    runCallbacks,\n    addCallback,\n    removeCallback,\n    hasCallbacks,\n  };\n}\n\nexport type CallbackManager = ReturnType<typeof createCallbackManager>;\n\nexport class EventEmitter {\n  private channels = new Map<string, CallbackManager>();\n\n  on(name: string, handler: AnyToVoidFunction) {\n    this.resolveChannel(name).addCallback(handler);\n    return this;\n  }\n\n  removeListener(name: string, handler: AnyToVoidFunction) {\n    this.resolveChannel(name).removeCallback(handler);\n    return this;\n  }\n\n  emit(name: string, ...args: any) {\n    this.resolveChannel(name).runCallbacks(...args);\n    return this;\n  }\n\n  private resolveChannel(name: string) {\n    let channel = this.channels.get(name);\n    if (!channel) {\n      channel = createCallbackManager();\n      this.channels.set(name, channel);\n    }\n\n    return channel;\n  }\n}\n","import type { ApiTransaction } from '../api/types';\n\nexport function compareTransactions(a: ApiTransaction, b: ApiTransaction, isAsc: boolean) {\n  let value = a.timestamp - b.timestamp;\n  if (value === 0) {\n    value = a.txId > b.txId ? 1 : a.txId < b.txId ? -1 : 0;\n  }\n  return isAsc ? value : -value;\n}\n","export default function generateUniqueId() {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2);\n}\n","import { isAscii } from '../stringFormat';\n\nconst MAX_COMMENT_SIZE = 120;\n\nexport function isValidLedgerComment(comment: string) {\n  return isAscii(comment) && comment.length <= MAX_COMMENT_SIZE;\n}\n","import { areSortedArraysEqual } from './iteratees';\n\nconst cache = new WeakMap<AnyFunction, {\n  lastArgs: any[];\n  lastResult: any;\n  lastTime: number;\n  isDisabledUntil?: number;\n}>();\n\nexport default function memoized<T extends AnyFunction>(fn: T, ttlSeconds?: number) {\n  const wrapper = (...args: Parameters<T>): ReturnType<T> => {\n    const cached = cache.get(fn);\n    const now = Date.now();\n\n    if (cached) {\n      const isCacheDisabled = cached.isDisabledUntil && cached.isDisabledUntil > now;\n      const isStale = ttlSeconds && cached.lastTime + (ttlSeconds * 1000) < now;\n\n      if (!isCacheDisabled && !isStale && areSortedArraysEqual(cached.lastArgs, args)) {\n        return cached.lastResult;\n      }\n    }\n\n    const result = fn(...args);\n    cache.set(fn, {\n      ...cached,\n      lastArgs: args,\n      lastResult: result,\n      lastTime: now,\n    });\n    return result;\n  };\n\n  wrapper.disableCache = (seconds: number) => {\n    const cached = cache.get(fn);\n    if (cached) {\n      cached.isDisabledUntil = Date.now() + (seconds * 1000);\n    }\n  };\n\n  return wrapper;\n}\n","export function isAscii(str: string) {\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) > 127) {\n      return false;\n    }\n  }\n  return true;\n}\n","const cache = new WeakMap<AnyFunction, Map<string, any>>();\n\nexport default function withCacheAsync<T extends AnyAsyncFunction>(\n  fn: T, canBeCached: (value: ReturnType<T>) => boolean = (value) => !!value,\n) {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    let fnCache = cache.get(fn);\n    const cacheKey = buildCacheKey(args);\n\n    if (fnCache) {\n      const cached = fnCache.get(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    } else {\n      fnCache = new Map();\n      cache.set(fn, fnCache);\n    }\n\n    const newValue = await fn(...args);\n\n    if (canBeCached(newValue)) {\n      fnCache.set(cacheKey, newValue);\n    }\n\n    return newValue;\n  };\n}\n\nfunction buildCacheKey(args: any[]) {\n  return args.reduce((cacheKey, arg) => {\n    return `${cacheKey}_${typeof arg === 'object' ? JSON.stringify(args) : arg}`;\n  }, '');\n}\n"],"names":["CustomHttpProvider","TonWeb","send","method","params","this","sendRequest","host","id","jsonrpc","apiUrl","request","lastError","lastStatusCode","headers","options","apiKey","body","JSON","stringify","i","response","fetch","status","error","result","json","Error","err","message","isNotTemporaryError","isFrequentError","logDebugError","pause","statusCode","includes","storage","IS_EXTENSION","extension","local","undefined","getItem","async","_await$storage$get","get","key","setItem","value","set","removeItem","remove","bind","clear","getAll","setMany","getMany","idb","keys","values","fromKeyValueArrays","items","Object","entries","withPromise","fn","Promise","resolve","arguments","localStorage","pick","assign","StorageType","ApiTransactionDraftError","ApiTransactionError","root","checkInt","parseInt","checkInts","arrayish","length","coerceArray","arg","copy","buffer","name","slice","Array","prototype","call","isArray","Uint8Array","createArray","copyArray","sourceArray","targetArray","targetStart","sourceStart","sourceEnd","Hex","convertUtf8","toBytes","text","encodeURI","c","charCodeAt","push","substr","fromBytes","bytes","String","fromCharCode","join","convertHex","v","numberOfRounds","rcon","S","Si","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","convertToInt32","AES","defineProperty","_prepare","rounds","_Ke","_Kd","index","roundKeyCount","KC","tk","tt","rconpointer","t","r","encrypt","plaintext","a","decrypt","ciphertext","ModeOfOperationECB","description","_aes","block","ModeOfOperationCBC","iv","_lastCipherblock","j","ModeOfOperationCFB","segmentSize","_shiftRegister","xorSegment","encrypted","ModeOfOperationOFB","_lastPrecipher","_lastPrecipherIndex","Counter","initialValue","_counter","setValue","setBytes","Number","MAX_SAFE_INTEGER","increment","ModeOfOperationCTR","counter","_remainingCounter","_remainingCounterIndex","aesjs","ModeOfOperation","ecb","cbc","cfb","ofb","ctr","utils","hex","utf8","padding","pkcs7","pad","data","padder","strip","_arrayTest","module","exports","fetchAdapter","config","Headers","auth","username","password","decodeURI","encodeURIComponent","btoa","toUpperCase","isFormData","isStandardBrowserEnv","delete","mode","cache","integrity","redirect","referrer","isUndefined","withCredentials","credentials","fullPath","buildFullPath","baseURL","url","buildURL","paramsSerializer","Request","createRequest","promiseChain","getResponse","timeout","res","setTimeout","timeoutErrorMessage","createError","race","reject","toString","settle","stageOne","e","ok","statusText","responseType","arrayBuffer","blob","formData","code","axios","isAxiosError","toJSON","number","fileName","lineNumber","columnNumber","stack","enhanceError","nodeCrypto","freeze","__proto__","_0n","BigInt","_1n","_2n","_8n","CU_O","CURVE","d","P","l","n","h","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","constructor","x","y","z","fromAffine","p","Point","TypeError","equals","ZERO","mod","toAffineBatch","points","toInv","nums","tmp","inverted","invert","reduce","acc","num","reduceRight","invertBatch","map","toAffine","normalizeZ","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","Z3","add","subtract","precomputeWindow","W","windows","base","window","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","Math","abs","cond1","cond2","constTimeNegate","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","is0","ax","ay","zz","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","condition","item","neg","assertRstPoint","RistrettoPoint","ep","calcElligatorRistrettoMap","r0","Ns","isValid","Ns_D_is_sq","s","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hashToCurve","r1","bytes255ToNumberLE","ensureBytes","R1","r2","R2","fromHex","emsg","b1","b2","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","I","invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","b","one","two","WeakMap","_setWindowSize","strict","normed","bytesToNumberLE","y2","u","isXOdd","fromPrivateKey","privateKey","getExtendedPublicKey","point","toX25519","Signature","assertValidity","u8","concatBytes","_len","arrays","_key","every","arr","hexes","from","padStart","uint8a","hexToBytes","array","hexByte","byte","isNaN","numberTo32BytesBE","reverse","MAX_255B","modulo","m","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","hash","expectedLength","max","isSafeInteger","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","sha512","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","cswap","swap","x_2","x_3","dummy","curve25519","BASE_POINT_U","scalarMult","pu","pointU","a24","x_1","sw","z_2","z_3","k_t","AA","BB","DA","CB","dacb","da_cb","xp2","montgomeryLadder","uEnc","decodeUCoordinate","scalarMultBase","crypto","node","web","self","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","digest","createHash","update","precompute","cached","sha512Sync","defineProperties","configurable","val","getSharedSecret","factory","require","createCallbackManager","callbacks","Set","removeCallback","cb","runCallbacks","args","forEach","callback","addCallback","hasCallbacks","Boolean","size","compareTransactions","isAsc","timestamp","txId","generateUniqueId","Date","now","random","MAX_COMMENT_SIZE","isValidLedgerComment","comment","isAscii","memoized","ttlSeconds","wrapper","isCacheDisabled","isDisabledUntil","isStale","lastTime","areSortedArraysEqual","lastArgs","lastResult","disableCache","seconds","str","withCacheAsync","canBeCached","fnCache","cacheKey","buildCacheKey","Map","newValue"],"sourceRoot":""}