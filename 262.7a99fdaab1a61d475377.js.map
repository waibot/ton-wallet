{"version":3,"file":"262.7a99fdaab1a61d475377.js","mappings":"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","sources":["webpack://mytonwallet/./src/util/cycleRestrict.ts","webpack://mytonwallet/./src/util/launchMediaWorkers.ts","webpack://mytonwallet/./src/lib/rlottie/RLottie.ts"],"sourcesContent":["export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\n\nimport { IS_TEST } from '../config';\n\nimport type { Connector } from './PostMessageConnector';\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n","import { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport {\n  DPR, IS_ANDROID, IS_IOS, IS_SAFARI,\n} from '../../util/windowEnvironment';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (!canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false') {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords!.x, containerInfo.coords!.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(DPR * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = Math.min(1, (this.direction * this.speed) / currentSpeed);\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n"],"names":["cycleRestrict","length","index","Math","floor","MAX_WORKERS","min","navigator","hardwareConcurrency","instances","WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","IS_TEST","Array","fill","undefined","map","worker","Worker","URL","connector","createConnector","_ref","instancesByRenderId","Map","lastWorkerIndex","RLottie","init","_len","arguments","args","_key","canvas","renderId","params","viewId","generateUniqueId","onLoad","instance","get","addView","coords","set","constructor","tgsUrl","container","customColor","onEnded","onLoop","_defineProperty","this","initConfig","initRenderer","removeView","ctx","isSharedCanvas","views","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","stopFrameIndex","direction","doPlay","pause","from","values","every","_ref2","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","_ref3","startFrameIndex","frameIndex","round","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","canvasWidth","canvasHeight","width","height","dataset","isJustCleaned","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","imageData","ImageData","requestMutation","document","createElement","getContext","style","appendChild","isConnected","isRendererInited","quality","max","DPR","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","request","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","lastRenderAt","animate","_ref4","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","_this$onLoop","_this$onEnded","call","_this$onLoop2","_this$onEnded2","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight"],"sourceRoot":""}